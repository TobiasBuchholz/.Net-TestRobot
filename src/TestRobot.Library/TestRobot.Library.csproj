<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>

    <!--Assembly and Namespace info -->
    <AssemblyName>TestRobot</AssemblyName>
    <RootNamespace>TestRobot</RootNamespace>

    <Product>$(AssemblyName) ($(TargetFramework))</Product>
    <AssemblyVersion>1.0.0</AssemblyVersion>
    <AssemblyFileVersion>1.0.0</AssemblyFileVersion>
    <Version>1.0.0</Version>
    <NeutralLanguage>en</NeutralLanguage>

    <!--Don't auto add files for me, I will tell you -->
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>

    <!-- Helper to add defines-->
    <DefineConstants>$(DefineConstants);</DefineConstants>

    <!--Assembly and Namespace info -->
    <PackageId>TestRobot</PackageId>
    <PackageVersion>1.0.0</PackageVersion>

    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/TobiasBuchholz/.Net-TestRobot</PackageProjectUrl>
    <RepositoryUrl>https://github.com/TobiasBuchholz/.Net-TestRobot.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageIcon>icon.png</PackageIcon>
    <PackageTags>testing, unit-test, design-pattern, helper</PackageTags>

    <Title>TestRobot</Title>
    <Summary>TestRobot is a small library to facilitate writing more stable, readable and maintainable tests by applying the Robot Pattern.</Summary>
    <Description>The main idea behind the Robot Pattern is to hide the implementation details of tests that are following the AAA Pattern (Arrange-Act-Assert) in a so called Robot and RobotResult class. Combining this idea with the Builder Pattern makes it easy to write very readable and maintainable tests.</Description>

    <Owners>Tobias Buchholz</Owners>
    <Authors>Tobias Buchholz</Authors>
    <Copyright>Copyright 2021</Copyright>

    <!--Version of C# to use -->
    <LangVersion>9</LangVersion>
    <Configurations>Debug;Release;DebugGenerator</Configurations>
  </PropertyGroup>

  <!-- Define what happens on build and release -->
  <PropertyGroup Condition=" '$(Configuration)'=='Debug' ">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='DebugGenerator'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)'=='Release' ">
    <DebugType>pdbonly</DebugType>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <ItemGroup>
    <!-- This None is here so the conditionally included files show up in the Solution Explorer -->
    <None Include="**\*.cs;**\*.xml;**\*.axml;**\*.png" Exclude="obj\**\*.*;bin\**\*.*;bin;obj" />
    <None Remove=".vs\**" />
    <None Remove=".idea\**" />
	<None Include="..\..\art\icon.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Genesis.TestUtil" Version="3.0.0" />
    <PackageReference Include="PCLMock" Version="5.1.3" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="TestRobotBase.cs" />
    <Compile Include="PCLMockExtension.cs" />
    <Compile Include="VerifyContinuationExtension.cs" />
  </ItemGroup>

</Project>
