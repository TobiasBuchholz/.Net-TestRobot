<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>

    <!--Assembly and Namespace info -->
    <AssemblyName>TestRobot.CodeGenerator</AssemblyName>
    <RootNamespace>TestRobot.CodeGenerator</RootNamespace>
    
    <Product>$(AssemblyName) ($(TargetFramework))</Product>
    <AssemblyVersion>1.0.0</AssemblyVersion>
    <AssemblyFileVersion>1.0.0</AssemblyFileVersion>
    <Version>1.0.0</Version>
    <NeutralLanguage>en</NeutralLanguage>

    <!-- Helper to add defines-->
    <DefineConstants>$(DefineConstants);</DefineConstants>
    
    <!--Assembly and Namespace info -->
    <PackageId>TestRobot.CodeGenerator</PackageId>
    <PackageVersion>1.0.0</PackageVersion>
    
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <Copyright>Tobias Buchholz 2021</Copyright>
    <PackageProjectUrl>https://github.com/TobiasBuchholz/.Net-TestRobot</PackageProjectUrl>
    <RepositoryUrl>https://github.com/TobiasBuchholz/.Net-TestRobot.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageIcon>icon.png</PackageIcon>
    <PackageTags>testing</PackageTags>

    <Title>TestRobot.CodeGenerator</Title>
    <Summary>This is an additional package to the TestRobot package that generates some boiler plate code for you.</Summary>
    <Description>Generates the AutoTestRobot and AutoTestRobotResult classes that serve as the base classes for the Robot Pattern. The code generator scans your test project's files for classes that are ending with *Mock and generates instances of these mocks in the AutoTestRobot class, so they can be used for the creation of the System Under Test (SUT) object. Furthermore it generates methods that help to verify times of method executions by the generated mocks in the AutoTestRobotResult class.</Description>

    <Owners>Tobias Buchholz</Owners>
    <Authors>Tobias Buchholz</Authors>
    <Copyright>Copyright 2021</Copyright>

    <!--Version of C# to use -->
    <LangVersion>9</LangVersion>
    <Configurations>Debug;Release;DebugGenerator</Configurations>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>
  
  <!-- Define what happens on build and release -->
  <PropertyGroup Condition=" '$(Configuration)'=='Debug' ">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='DebugGenerator'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(Configuration)'=='Release' ">
    <DebugType>pdbonly</DebugType>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='DebugGenerator|AnyCPU'">
    <DefineConstants>TRACE;DEBUG;DEBUGGENERATOR</DefineConstants>
  </PropertyGroup>
  
  <ItemGroup>
    <!-- This None is here so the conditionally included files show up in the Solution Explorer -->
    <None Include="**\*.cs;**\*.xml;**\*.axml;**\*.png" Exclude="obj\**\*.*;bin\**\*.*;bin;obj" />
    <None Remove=".vs\**" />
    <None Remove=".idea\**" />
	<None Include="..\..\art\icon.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="3.9.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.2" PrivateAssets="all" />
  </ItemGroup>

</Project>
